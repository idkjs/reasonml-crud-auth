// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Fetch = require("bs-fetch/src/Fetch.bs.js");
var Utils = require("../utils.bs.js");
var Common = require("../common.bs.js");
var Constants = require("../constants.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");

function company(json) {
  return {
          id: Json_decode.optional((function (param) {
                  return Json_decode.field("id", Json_decode.$$int, param);
                }), json),
          name: Json_decode.field("name", Json_decode.string, json)
        };
}

function company_array(json) {
  return Json_decode.array(company, json);
}

var Decode = {
  company: company,
  company_array: company_array
};

function company$1(companyObj) {
  var id = companyObj.id;
  return Json_encode.object_({
              hd: [
                "id",
                id !== undefined ? id : null
              ],
              tl: {
                hd: [
                  "name",
                  companyObj.name
                ],
                tl: /* [] */0
              }
            });
}

var Encode = {
  company: company$1
};

var companiesUrl = "" + Constants.apiUrl + "/companies";

function companyUrl(id) {
  return "" + Constants.apiUrl + "/companies/" + id;
}

function $$fetch$1(id) {
  return fetch(companyUrl(id)).then(function (prim) {
                return prim.json();
              }).then(function (json) {
              return Promise.resolve(company(json));
            });
}

function fetchAll(param) {
  return fetch(companiesUrl).then(function (prim) {
                return prim.json();
              }).then(function (json) {
              return Promise.resolve(Json_decode.array(company, json));
            });
}

function add(company$2) {
  var body = JSON.stringify(company$1(company$2));
  var headers = Common.$$Request.getDefaultHeaders(undefined);
  var request = Fetch.RequestInit.make(/* Post */2, Caml_option.some(headers), Caml_option.some(body), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(undefined);
  return fetch(companiesUrl, request).then(function (prim) {
                return prim.json();
              }).then(function (json) {
              return Promise.resolve(company(json));
            });
}

function edit(company$2) {
  var body = JSON.stringify(company$1(company$2));
  var headers = Common.$$Request.getDefaultHeaders(undefined);
  var request = Fetch.RequestInit.make(/* Put */3, Caml_option.some(headers), Caml_option.some(body), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(undefined);
  return fetch(companyUrl(company$2.id), request).then(Common.$$Response.statusOk);
}

function remove(id) {
  return fetch(companyUrl(id), Fetch.RequestInit.make(/* Delete */4, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(undefined)).then(Common.$$Response.statusOk);
}

var Api = {
  baseUrl: Constants.apiUrl,
  companiesUrl: companiesUrl,
  companyUrl: companyUrl,
  $$fetch: $$fetch$1,
  fetchAll: fetchAll,
  add: add,
  edit: edit,
  remove: remove
};

function append(companies, company) {
  return $$Array.concat({
              hd: Utils.optToArrayOrEmpty(companies),
              tl: {
                hd: [company],
                tl: /* [] */0
              }
            });
}

function replace(companies, company) {
  return $$Array.map((function (c) {
                if (c.id === company.id) {
                  return {
                          id: c.id,
                          name: company.name
                        };
                } else {
                  return c;
                }
              }), Utils.optToArrayOrEmpty(companies));
}

function removeWithId(companies, id) {
  var companyList = $$Array.to_list(Utils.optToArrayOrEmpty(companies));
  var filteredList = List.filter(function (company) {
          return Utils.optIntOrRaise(company.id) !== id;
        })(companyList);
  return $$Array.of_list(filteredList);
}

exports.Decode = Decode;
exports.Encode = Encode;
exports.Api = Api;
exports.append = append;
exports.replace = replace;
exports.removeWithId = removeWithId;
/* Utils Not a pure module */
