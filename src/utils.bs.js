// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var RegisterServiceWorker = require("./registerServiceWorker").default;

function registerServiceWorker(prim) {
  RegisterServiceWorker();
  
}

function intEl(n) {
  return String(n);
}

function optIntEl(n) {
  if (n !== undefined) {
    return String(n);
  } else {
    return null;
  }
}

function textEl(prim) {
  return prim;
}

function arrayEl(prim) {
  return prim;
}

function boolEl(n) {
  if (n) {
    return "true";
  } else {
    return "false";
  }
}

function optIntToString(n) {
  if (n !== undefined) {
    return String(n);
  } else {
    return "<null>";
  }
}

var ShouldHaveValidIntValue = /* @__PURE__ */Caml_exceptions.create("Utils.ShouldHaveValidIntValue");

function optIntOrRaise(n) {
  if (n !== undefined) {
    return n;
  }
  throw {
        RE_EXN_ID: ShouldHaveValidIntValue,
        Error: new Error()
      };
}

function getValueFromEvent($$event) {
  return $$event.target.value;
}

function optToArrayOrEmpty(x) {
  if (x !== undefined) {
    return x;
  } else {
    return $$Array.of_list(/* [] */0);
  }
}

function optStringOrEmpty(x) {
  if (x !== undefined) {
    return x;
  } else {
    return "";
  }
}

exports.registerServiceWorker = registerServiceWorker;
exports.intEl = intEl;
exports.optIntEl = optIntEl;
exports.textEl = textEl;
exports.arrayEl = arrayEl;
exports.boolEl = boolEl;
exports.optIntToString = optIntToString;
exports.ShouldHaveValidIntValue = ShouldHaveValidIntValue;
exports.optIntOrRaise = optIntOrRaise;
exports.getValueFromEvent = getValueFromEvent;
exports.optToArrayOrEmpty = optToArrayOrEmpty;
exports.optStringOrEmpty = optStringOrEmpty;
/* ./registerServiceWorker Not a pure module */
