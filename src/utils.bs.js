// Generated by ReScript, PLEASE EDIT WITH CARE

import * as $$Array from "../../../../../usr/local/lib/node_modules/bs-platform/lib/es6/array.js";
import * as Caml_exceptions from "../../../../../usr/local/lib/node_modules/bs-platform/lib/es6/caml_exceptions.js";
import RegisterServiceWorker from "./registerServiceWorker";

function registerServiceWorker(prim) {
  RegisterServiceWorker();
  
}

function intEl(n) {
  return String(n);
}

function optIntEl(n) {
  if (n !== undefined) {
    return String(n);
  } else {
    return null;
  }
}

function textEl(prim) {
  return prim;
}

function arrayEl(prim) {
  return prim;
}

function boolEl(n) {
  if (n) {
    return "true";
  } else {
    return "false";
  }
}

function optIntToString(n) {
  if (n !== undefined) {
    return String(n);
  } else {
    return "<null>";
  }
}

var ShouldHaveValidIntValue = /* @__PURE__ */Caml_exceptions.create("Utils.ShouldHaveValidIntValue");

function optIntOrRaise(n) {
  if (n !== undefined) {
    return n;
  }
  throw {
        RE_EXN_ID: ShouldHaveValidIntValue,
        Error: new Error()
      };
}

function getValueFromEvent($$event) {
  return $$event.target.value;
}

function optToArrayOrEmpty(x) {
  if (x !== undefined) {
    return x;
  } else {
    return $$Array.of_list(/* [] */0);
  }
}

function optStringOrEmpty(x) {
  if (x !== undefined) {
    return x;
  } else {
    return "";
  }
}

export {
  registerServiceWorker ,
  intEl ,
  optIntEl ,
  textEl ,
  arrayEl ,
  boolEl ,
  optIntToString ,
  ShouldHaveValidIntValue ,
  optIntOrRaise ,
  getValueFromEvent ,
  optToArrayOrEmpty ,
  optStringOrEmpty ,
  
}
/* ./registerServiceWorker Not a pure module */
